import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultPhoto, Update
from telegram.ext import Application, CommandHandler, InlineQueryHandler, ContextTypes, CallbackQueryHandler
from uuid import uuid4
from flask import Flask, jsonify
import threading

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ рждржерзНржп рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHANNEL_ID = os.getenv("DEFAULT_CHANNEL_ID")

# Flask ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
app = Flask(__name__)

# Telegram bot application рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
telegram_app = Application.builder().token(BOT_TOKEN).build()

# ЁЯОм ржорзБржнрж┐ ржбрж╛ржЯрж╛ржмрзЗрж╕ (ржбрзЗржорзЛ рж╣рж┐рж╕рзЗржмрзЗ) ЁЯОм
MOVIE_DATABASE = [
    {
        "title": "Kalki 2024",
        "poster_url": "https://example.com/kalki_2024.jpg",
        "description": "Kalki 2024 ржПржХржЯрж┐ ржЕрзНржпрж╛ржХрж╢ржиржзрж░рзНржорзА рж╕рж┐ржирзЗржорж╛ред",
        "rating": "тнР 8.3",
        "genre": ["Action", "Adventure"],
        "tags": ["#Action", "#Adventure", "#Blockbuster"],
        "release_year": 2024,
        "source": "Netflix",
        "trending": True,
        "new_release": True,
        "trailer_link": "https://www.youtube.com/results?search_query=Kalki+2024+trailer"
    },
    {
        "title": "Inception",
        "poster_url": "https://example.com/inception.jpg",
        "description": "Inception ржПржХржЯрж┐ рж╕рж╛ржЗ-ржлрж╛ржЗ ржЕрзНржпрж╛ржХрж╢ржиржзрж░рзНржорзА рж╕рж┐ржирзЗржорж╛ред",
        "rating": "тнР 8.8",
        "genre": ["Sci-Fi", "Thriller"],
        "tags": ["#SciFi", "#MindBending", "#Thriller"],
        "release_year": 2010,
        "source": "Amazon Prime",
        "trending": False,
        "new_release": False,
        "trailer_link": "https://www.youtube.com/results?search_query=Inception+trailer"
    },
    {
        "title": "Avatar 2022",
        "poster_url": "https://example.com/avatar_2022.jpg",
        "description": "Avatar 2022 ржПржХржЯрж┐ ржмрж┐ржЦрзНржпрж╛ржд ржлрзНржпрж╛ржирзНржЯрж╛рж╕рж┐ рж╕рж┐ржирзЗржорж╛ред",
        "rating": "тнР 7.5",
        "genre": ["Fantasy", "Adventure"],
        "tags": ["#Fantasy", "#Adventure", "#Epic"],
        "release_year": 2022,
        "source": "Disney+",
        "trending": True,
        "new_release": True,
        "trailer_link": "https://www.youtube.com/results?search_query=Avatar+2022+trailer"
    }
    # ржЖрж░ржУ ржорзБржнрж┐ ржпрзЛржЧ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ...
]

# ЁЯОм рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣рзЗрж░ ржЬржирзНржп ржлрж╛ржВрж╢ржи ЁЯОм
async def fetch_movie_info(movie_name=None, genre=None, trending=False, new_release=False):
    results = []
    for movie in MOVIE_DATABASE:
        if (
            (movie_name and movie_name.lower() in movie["title"].lower()) or
            (genre and genre in movie["genre"]) or
            (trending and movie["trending"]) or
            (new_release and movie["new_release"])
        ):
            results.append(movie)
    return results

# ЁЯОм ржЗржирж▓рж╛ржЗржи ржорзЛржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ЁЯОм
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.strip().lower()
    if not query:
        return

    # ЁЯОм ржХрж┐ржУржпрж╝рж╛рж░рзНржб ржЕржирзБржпрж╛ржпрж╝рзА рж╕рж┐ржирзЗржорж╛ ржЦрзЛржБржЬрж╛ ЁЯОм
    if query == "new":
        movies = await fetch_movie_info(new_release=True)
    elif query == "trending":
        movies = await fetch_movie_info(trending=True)
    elif query.startswith("genre:"):
        genre = query.split(":", 1)[1].strip()
        movies = await fetch_movie_info(genre=genre)
    else:
        movies = await fetch_movie_info(movie_name=query)

    results = []
    for movie in movies:
        title_with_year = f"{movie['title']}"
        trending_tag = "ЁЯФе #Trending" if movie.get("trending") else "тЬи #Popular"
        source_tag = f"ЁЯУ║ Source: {movie['source']}"

        # ржЗржирж▓рж╛ржЗржи рж░рзЗрж╕рж╛рж▓рзНржЯ рждрзИрж░рж┐
        results.append(
            InlineQueryResultPhoto(
                id=str(uuid4()),
                title=f"{title_with_year} {trending_tag}",
                photo_url=movie["poster_url"],
                thumb_url=movie["poster_url"],
                caption=(
                    f"ЁЯОм *{title_with_year}*\n"
                    f"{trending_tag}\n"
                    f"тнР *Rating:* {movie['rating']}\n"
                    f"ЁЯОн *Genre:* {', '.join(movie['genre'])}\n"
                    f"ЁЯП╖ *Tags:* {', '.join(movie['tags'])}\n"
                    f"ЁЯУЕ *Release Year:* {movie['release_year']}\n"
                    f"{source_tag}\n"
                    f"ЁЯУЦ *Description:* {movie['description']}\n"
                ),
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ЁЯУг Share to Channel", callback_data=f"post|{movie['title']}")],
                    [InlineKeyboardButton("тЦ╢я╕П Watch Trailer", url=movie["trailer_link"])]
                ])
            )
        )
    await update.inline_query.answer(results, cache_time=10)

# ЁЯУв ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржХрж▓ржмрзНржпрж╛ржХ ржлрж╛ржВрж╢ржи ЁЯУв
async def post_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    movie_title = query.data.split('|')[1]

    # ЁЯОе ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп ржмрзЗрж░ ржХрж░рж╛ ЁЯОе
    movie_info = next((m for m in MOVIE_DATABASE if m["title"] == movie_title), None)
    if not movie_info:
        await query.answer("тЪая╕П Movie information not found.")
        return

    # ржорзБржнрж┐рж░ рждржерзНржп ржмрж╛рж░рзНрждрж╛ рждрзИрж░рж┐
    tags = ", ".join(movie_info["tags"])
    message = f"""
ЁЯОм *Title:* {movie_info['title']}
тнР *Rating:* {movie_info['rating']}
ЁЯОн *Genre:* {', '.join(movie_info['genre'])}
ЁЯП╖ *Tags:* {tags}
ЁЯУЕ *Release Year:* {movie_info['release_year']}
ЁЯУ║ *Source:* {movie_info['source']}
ЁЯУЦ *Description:* {movie_info['description']}
    """

    keyboard = [
        [InlineKeyboardButton("тЦ╢я╕П Watch Trailer", url=movie_info["trailer_link"])],
        [InlineKeyboardButton("ЁЯОе Movie Channel", url="https://t.me/moviechannel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    await context.bot.send_photo(chat_id=DEFAULT_CHANNEL_ID, photo=movie_info["poster_url"], caption=message, reply_markup=reply_markup, parse_mode="Markdown")
    await query.answer("тЬЕ Successfully posted to channel!")

# ЁЯУД рж╕рж╛рж╣рж╛ржпрзНржп ржХржорж╛ржирзНржб ЁЯУД
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯОм *ржХржорж╛ржирзНржб рж╕ржорзВрж╣* ЁЯОм\n"
        "/help - рж╕рж╛рж╣рж╛ржпрзНржп ржжрзЗржЦрзБржи\n"
        "ЁЯОм ржЗржирж▓рж╛ржЗржи ржорзЛржбрзЗ рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп ржЦрзБржБржЬрзБржи:\n\n"
        "ржХрж┐ржУржпрж╝рж╛рж░рзНржбрзЗрж░ ржЙржжрж╛рж╣рж░ржг:\n"
        "ЁЯСЙ рж╕рж╛ржзрж╛рж░ржг ржЦрзЛржБржЬ: ржорзБржнрж┐рж░ ржирж╛ржо ржЯрж╛ржЗржк ржХрж░рзБржи\n"
        "ЁЯСЙ ржирждрзБржи ржорзБржнрж┐: 'new' ржЯрж╛ржЗржк ржХрж░рзБржи\n"
        "ЁЯСЙ ржЯрзНрж░рзЗржирзНржбрж┐ржВ ржорзБржнрж┐: 'trending' ржЯрж╛ржЗржк ржХрж░рзБржи\n"
        "ЁЯСЙ ржЬржирж░ ржЕржирзБрж╕рж╛рж░рзЗ ржЦрзЛржБржЬ: 'genre:genre_name' ржЯрж╛ржЗржк ржХрж░рзБржи (ржпрзЗржоржи - genre:Action)"
    )

# ЁЯУ▓ ржмржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛ ЁЯУ▓
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(InlineQueryHandler(inline_query))
telegram_app.add_handler(CallbackQueryHandler(post_to_channel, pattern=r'^post\|'))

# ЁЯЪА Flask рж░рзБржЯ ЁЯЪА
@app.route('/')
def index():
    return "ЁЯдЦ Bot is running..."

@app.route('/health')
def health():
    return jsonify(status="running", health_check="success")

# Flask ржПржмржВ Telegram bot ржПржХрж╕рж╛ржерзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
def run_flask():
    app.run(host="0.0.0.0", port=8000)  # TCP Health check ржЬржирзНржп host 0.0.0.0 ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ

def run_bot():
    telegram_app.run_polling()

if __name__ == "__main__":
    print("ЁЯдЦ Bot is running with Flask server...")
    threading.Thread(target=run_flask).start()
    threading.Thread(target=run_bot).start()
