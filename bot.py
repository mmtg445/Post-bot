import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultPhoto, Update
from telegram.ext import Application, CommandHandler, InlineQueryHandler, ContextTypes, CallbackQueryHandler
from uuid import uuid4
from flask import Flask
import threading

# .env ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHANNEL_ID = os.getenv("DEFAULT_CHANNEL_ID")

# Flask ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
app = Flask(__name__)

# Telegram bot application рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
telegram_app = Application.builder().token(BOT_TOKEN).build()

# ЁЯОе рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣рзЗрж░ ржЬржирзНржп ржлрж╛ржВрж╢ржи ЁЯОе
async def fetch_movie_info(movie_name):
    # ржЙржжрж╛рж╣рж░ржг рж╣рж┐рж╕рзЗржмрзЗ рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп ржкрзНрж░ржжрж╛ржи
    return [
        {
            "title": f"{movie_name} 2024",
            "poster_url": "https://example.com/kalki_2024.jpg",
            "description": f"{movie_name} 2024 ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ рж╕рж┐ржирзЗржорж╛ред",
            "rating": "тнР 8.3",
            "genre": ["Action", "Adventure"],
            "tags": ["#Action", "#Drama", "#Epic", "#Adventure"],
            "release_year": 2024,
            "trending": True,
            "trailer_link": f"https://www.youtube.com/results?search_query={movie_name}+2024+trailer"
        },
        {
            "title": f"{movie_name} 2019",
            "poster_url": "https://example.com/kalki_2019.jpg",
            "description": f"{movie_name} 2019 ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ рж╕рж┐ржирзЗржорж╛ред",
            "rating": "тнР 7.8",
            "genre": ["Drama"],
            "tags": ["#Drama", "#Classic", "#Historical"],
            "release_year": 2019,
            "trending": False,
            "trailer_link": f"https://www.youtube.com/results?search_query={movie_name}+2019+trailer"
        }
    ]

# ЁЯОм ржЗржирж▓рж╛ржЗржи ржорзЛржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ЁЯОм
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query
    if not query:
        return

    # ЁЯОм рж╕рж┐ржирзЗржорж╛рж░ рждрж╛рж▓рж┐ржХрж╛ рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛ ЁЯОм
    movies = await fetch_movie_info(query)
    results = []
    for movie in movies:
        title_with_year = f"{movie['title']}"
        trending_tag = "ЁЯФе Trending" if movie.get("trending") else "тЬи Popular"

        # ржЗржирж▓рж╛ржЗржи рж░рзЗрж╕рж╛рж▓рзНржЯ ржмрж╛ржирж╛ржирзЛ
        results.append(
            InlineQueryResultPhoto(
                id=str(uuid4()),
                title=f"{title_with_year} {trending_tag}",
                photo_url=movie["poster_url"],
                thumb_url=movie["poster_url"],
                caption=(
                    f"ЁЯОм *{title_with_year}*\n"
                    f"{trending_tag}\n"
                    f"тнР *Rating:* {movie['rating']}\n"
                    f"ЁЯОн *Genre:* {', '.join(movie['genre'])}\n"
                    f"ЁЯП╖ *Tags:* {', '.join(movie['tags'])}\n"
                    f"ЁЯУЦ *Description:* {movie['description']}\n"
                ),
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ЁЯУг Share to Channel", callback_data=f"post|{movie['title']}")],
                    [InlineKeyboardButton("тЦ╢я╕П Watch Trailer", url=movie["trailer_link"])]
                ])
            )
        )
    await update.inline_query.answer(results)

# ЁЯУв ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржХрж▓ржмрзНржпрж╛ржХ ржлрж╛ржВрж╢ржи ЁЯУв
async def post_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    movie_title = query.data.split('|')[1]

    # ЁЯОе ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп ржмрзЗрж░ ржХрж░рж╛ ЁЯОе
    movie_info = next((m for m in await fetch_movie_info(movie_title) if m["title"] == movie_title), None)
    if not movie_info:
        await query.answer("тЪая╕П Movie information not found.")
        return

    # тЬи ржорзБржнрж┐рж░ рждржерзНржп ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржмрж╛рж░рзНрждрж╛ ржЧржаржи ржХрж░рж╛ тЬи
    tags = ", ".join(movie_info["tags"])
    message = f"""
ЁЯОм *Title:* {movie_info['title']}
тнР *Rating:* {movie_info['rating']}
ЁЯОн *Genre:* {', '.join(movie_info['genre'])}
ЁЯП╖ *Tags:* {tags}
ЁЯУЦ *Description:* {movie_info['description']}
    """

    keyboard = [
        [InlineKeyboardButton("тЦ╢я╕П Watch Trailer", url=movie_info["trailer_link"])],
        [InlineKeyboardButton("ЁЯОе Movie Channel", url="https://t.me/moviechannel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    await context.bot.send_photo(chat_id=DEFAULT_CHANNEL_ID, photo=movie_info["poster_url"], caption=message, reply_markup=reply_markup, parse_mode="Markdown")
    await query.answer("тЬЕ Successfully posted to channel!")

# ЁЯУД рж╕рж╛рж╣рж╛ржпрзНржп ржХржорж╛ржирзНржб ЁЯУД
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯОм *ржХржорж╛ржирзНржб рж╕ржорзВрж╣* ЁЯОм\n"
        "/help - рж╕рж╛рж╣рж╛ржпрзНржп ржжрзЗржЦрзБржи\n"
        "ЁЯОм ржЗржирж▓рж╛ржЗржи ржорзЛржбрзЗ рж╕рж┐ржирзЗржорж╛рж░ рждржерзНржп ржЦрзБржБржЬрзБржи (ржЯрзЗржХрзНрж╕ржЯ ржЯрж╛ржЗржк ржХрж░рзБржи)\n\n"
        "тЪая╕П ржЙржжрж╛рж╣рж░ржг: рж╕рж┐ржирзЗржорж╛рж░ ржирж╛ржо ржЯрж╛ржЗржк ржХрж░рзБржи ржпрзЗржоржи - Kalki"
    )

# ЁЯУ▓ ржмржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛ ЁЯУ▓
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(InlineQueryHandler(inline_query))
telegram_app.add_handler(CallbackQueryHandler(post_to_channel, pattern=r'^post\|'))

# ЁЯЪА Flask рж░рзБржЯ ЁЯЪА
@app.route('/')
def index():
    return "ЁЯдЦ Bot is running..."

@app.route('/health')
def health():
    return "тЬЕ Bot health check successful!"

@app.route('/status')
def status():
    return {
        "status": "running",
        "features": ["Genre-based search", "Trending movies", "Tags display", "Release year filter"]
    }

# Flask ржПржмржВ Telegram bot ржПржХрж╕рж╛ржерзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
def run_flask():
    app.run(port=5000)

def run_bot():
    telegram_app.run_polling()

if __name__ == "__main__":
    print("ЁЯдЦ Bot is running with Flask server...")
    threading.Thread(target=run_flask).start()
    threading.Thread(target=run_bot).start()
